# -*- coding: utf-8 -*-
"""waterjugusingbfs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Galy00hUPWObbo5j-hQIi2BQEMnNHJfI
"""

from collections import deque

JUG1 = 4
JUG2 = 3
GOAL = 1

def water_jug_bfs():
    start = (0, 0)
    visited = set()
    queue = deque([[start]])

    while queue:
        path = queue.popleft()
        state = path[-1]

        if state[0] == GOAL or state[1] == GOAL:
            return path

        if state in visited:
            continue
        visited.add(state)

        x, y = state

        next_states = [
            (JUG1, y),
            (x, JUG2),
            (0, y),
            (x, 0),
            (x - min(x, JUG2 - y), y + min(x, JUG2 - y)),
            (x + min(y, JUG1 - x), y - min(y, JUG1 - x))
        ]

        for nxt in next_states:
            if nxt not in visited:
                new_path = list(path)
                new_path.append(nxt)
                queue.append(new_path)
    return None

solution = water_jug_bfs()
print("BFS Solution path:")
for step in solution:
    print(step)